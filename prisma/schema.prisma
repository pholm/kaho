generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ERD.png"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  group         Group     @default(USER)
  accounts      Account[]
  sessions      Session[]
  loans         Loan[]
}

enum Group {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id           String        @id @default(cuid())
  name         String
  description  String?
  image        String?
  amount       Int
  categories   Category[]
  reservations Reservation[]
  location     Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId   String
}

model Location {
  id  String  @id @default(cuid())
  name        String
  description String?
  items       Item[]
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  items       Item[]
}

model Reservation {
  id     String @id @default(cuid())
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  amount Int
  loan   Loan   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  itemId String
  loanId String
}

model Loan {
  id           String        @id @default(cuid())
  status       LoanStatus    @default(PENDING)
  reservations Reservation[]
  startTime    DateTime
  endTime      DateTime
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

enum LoanStatus {
  PENDING
  ACCEPTED
  REJECTED
  INUSE
  RETURNED
}
